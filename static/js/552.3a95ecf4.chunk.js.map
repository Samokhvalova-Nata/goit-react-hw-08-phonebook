{"version":3,"file":"static/js/552.3a95ecf4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n    [selectFilter, selectContacts],\n    (filter, contacts) => {\n        const normalizeFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizeFilter)).sort((a, b) => a.name.localeCompare(b.name));\n    })\n","import styled from '@emotion/styled';\n\nexport const Wrap = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;","import { RotatingLines } from 'react-loader-spinner';\nimport { Wrap } from './Loader.styled';\n\nexport const Loader = () => {\n    return (\n        <Wrap>\n            <RotatingLines\n                strokeColor=\"#2196F3\"\n                strokeWidth=\"5\"\n                animationDuration=\"0.75\"\n                width=\"96\"\n                visible={true}\n            />\n        </Wrap>\n    )\n};\n\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n    display: flex;\n    flex-direction: column;\n\n    align-items: center;\n    width: 500px;\n    min-height: 240px;\n    border-radius: 10px;\n    border: 1px solid rgba(33, 33, 33, 0.5);\n    padding: 40px;\n`;\n\nexport const Label = styled.label`\n    display: inline-block;\n    text-align: left;\n    margin-bottom: 4px;\n    color: var(--primary-text-color);\n    font-size: 16px;\n`;\n\nexport const Input = styled(Field)`\n    width: 100%;\n    max-width: 432px;\n    height: 40px;\n\n    border-radius: 4px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    background-color: transparent;\n    outline: transparent;\n    \n\n    padding-left: 15px;\n    margin-bottom: 15px;\n\n    font-weight: 500;\n    font-size: 18px;\n\n    transition: border-color var(--transition);\n    &:focus,\n    &:hover {\n            border-color: var(--accent-color);\n        }\n`;\n\nexport const Error = styled.span`\n    margin-bottom: 8px;\n    color: red;\n    font-size: 16px;\n`;\n\nexport const Button = styled.button`\n        width: 100%;\n        max-width: 450px;\n        height: 50px;\n        margin-top: 10px;\n\n        border: 1px solid transparent;\n        border-radius: 5px;\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n        background-color: var(--accent-color);\n        color: var(--primary-white-color);\n        font-weight: 700;\n        font-size: 16px;\n        text-transform: uppercase;\n        transition: background-color var(--transition), transform var(--transition);\n\n        &:hover,\n        &:focus {\n        background-color: #188CE8;\n        transform: scale(1.01);\n    }\n`;\n","import { FormStyled, Label, Input, Error, Button } from './ContactForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix';\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().required().min(9),\n});\n\nconst initialValues = {\n    name: '',\n    number: ''\n};\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = (values, { resetForm }) => {\n        const newName = contacts.some(contact =>\n                contact.name.toLowerCase() === values.name.toLowerCase());\n                if (newName) {\n                    Notify.failure(`${values.name} is already in contacts`);\n                    return;\n                }\n        dispatch(addContact({ name: values.name, number: values.number }));\n        resetForm();\n        Notify.success(`${values.name} is added to contacts`);\n    };\n\n        return (\n            <Formik \n                initialValues={initialValues} \n                onSubmit={handleSubmit}\n                validationSchema={schema}>\n                <FormStyled >\n                    <Label htmlFor='name'>Name</Label>\n                    <Input type=\"text\" name=\"name\" />\n                    <ErrorMessage component={Error} name=\"name\" />\n\n                    <Label htmlFor='number'>Number</Label>\n                    <Input type=\"tel\" name=\"number\" />\n                    <ErrorMessage component={Error} name=\"number\"/>\n                    <Button type=\"submit\">Add contact</Button>\n                </FormStyled>\n            </Formik>\n        );\n};","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n    display: inline-block;\n    text-align: left;\n    // margin-right: 15px;\n    color: var(--secondary-text-color);\n    font-size: 20px;\n    font-weight: 500;\n`\n\nexport const Input = styled.input`\n    width: 336px;\n    height: 40px;\n\n    border-radius: 4px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    background-color: transparent;\n    outline: transparent;\n    \n\n    padding-left: 15px;\n    margin-left: 20px;\n    margin-bottom: 30px;\n\n    font-weight: 500;\n    font-size: 18px;\n\n    transition: border-color var(--transition);\n    &:focus,\n    &:hover {\n            border-color: var(--accent-color);\n        }\n`","import { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\nimport { updateFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const handleChangeFilter = (e) => {\n        dispatch(updateFilter(e.currentTarget.value))\n    };\n\n    return (\n        <>\n            <Label htmlFor='search'>\n                Find contacts by name\n                <Input\n                    type=\"text\"\n                    name=\"search\"\n                    value={filter}\n                    onChange={handleChangeFilter}/>\n            </Label>\n        </>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 20px 0px;\n`;\n\nexport const Text = styled.p`\n    color: var(--primary-text-color);\n    font-size: 20px;\n    &:first-of-type {\n    font-weight: 500; \n    color: var(--secondary-text-color);  \n    }\n`;\n\nexport const Button = styled.button`\n        min-width: 120px;\n        height: 40px;\n\n        border: 1px solid transparent;\n        border-radius: 5px;\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n\n        background-color: var(--accent-color);\n        color: var(--primary-white-color);\n        font-weight: 700;\n        font-size: 16px;\n        transition: background-color var(--transition), transform var(--transition);\n\n        &:hover,\n        &:focus {\n        background-color: #188CE8;\n        transform: scale(1.04);\n    }\n`","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {Item, Text, Button} from './ContactItem.styled'\n\nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(id));\n    return (\n        <Item>\n            <Text>{name}</Text>\n            <Text>{number}</Text>\n            <Button type='button'\n                onClick={handleDelete}>\n                Delete\n            </Button>\n        </Item>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n    width: 500px;\n    min-height: 240px;\n    border-radius: 10px;\n    border: 1px solid rgba(33, 33, 33, 0.5);\n    padding: 40px;\n`;\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { List } from './ContactList.styled'\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <List>\n            {visibleContacts.map(({ id, name, number }) => (\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </List>\n    );\n};","import { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\n// import { Container, SubTitile, Titile } from './Contacts.styled';\n\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      {/* {error && Notify.failure('Ooops!..Something went wrong. Try to reload page')} */}\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizeFilter","toLowerCase","contact","name","includes","sort","a","b","localeCompare","Wrap","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","FormStyled","Form","Label","Input","Field","Error","Button","schema","yup","shape","required","number","min","initialValues","ContactForm","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","some","Notify","addContact","validationSchema","htmlFor","type","component","Filter","value","onChange","e","updateFilter","currentTarget","Item","Text","ContactItem","id","onClick","deleteContact","List","ContactList","visibleContacts","map"],"sourceRoot":""}